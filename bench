#!/bin/bash

minbench=1
maxbench=3
a=$1

function init_b() {
    rm src/*
}

function b1() {
    echo nocode.rs without emscripten
    init_b
    cp msrc/nocode.rs src/lib.rs
    cargo build --target wasm32-unknown-unknown --release
    cp target/wasm32-unknown-unknown/release/wasm-benchmark.wasm bin/b1.wasm
    wasm-bindgen bin/b1.wasm --out-dir bin/ --no-typescript --target no-modules
}

function b2() {
    echo dummy test
    #echo nocode.rs with emscripten
    #init_b
    #cp msrc/nocode.rs src/main.rs
    #cargo build --target wasm32-unknown-emscripten --release
    #cp target/wasm32-unknown-emscripten/release/wasm_benchmark.wasm bin/b2.wasm
}

function b3() {
    echo mybindgen.rs without emscripten
    init_b
    cp msrc/mybindgen.rs src/lib.rs
    cargo build --target wasm32-unknown-unknown --release
    cp target/wasm32-unknown-unknown/release/wasm_benchmark.wasm bin/b3.wasm
    wasm-bindgen bin/b3.wasm --out-dir bin/ --no-typescript --target no-modules
}

function bn() {
    echo "executing benchmark '$1'"
    case $1 in
        1) b1;;
        2) b2;;
        3) b3;;
        *) echo error: fatal input error;;
    esac
}

if [[ $# -eq 0 ]]; then
    echo error: needing at least one argument
else
    case $1 in
        all)
            echo bench all
            for i in $(seq $minbench $maxbench); do
                bn $i 
            done
            ;;
        *)              
            if (($minbench<=$a && $a<=$maxbench)); then
                bn $a
            else
                echo "error: needing number argument in the range of 1..$maxbench or 'all'"
            fi
            ;;
    esac
fi
